Process creation
----------------

There is no inherent hierarchy among processes.

The designer of an application may explicitly create such a hierarchy.

Process creation

Pid = spawn(Module, FunctionName, ArgumentList)

Pids are used for all forms of communication with a process. 

The call to spawn/3 

    returns immediately when the new process has been created and 
    does not wait for the given function to evaluate.

Process Pid1 spawns Pid2.

Pid2 = spawn(Mod, Func, Args)

Pid1 and Pid2 are executing concurrently.

The process identifier of the Pid2, is now known only to process Pid1.

     Erlang security system is based on restricting the spread of 
     the Pid of a process

A process terminates when the evaluation of the function is completed.

Pid is a data object as any other object like the integer.

Inter-process Communication
---------------------------

Communication between processes is by message passing, only.

Pid ! Message

A message can be any valid Erlang term. 

send (!) is a primitive which evaluates its arguments.

foo(12) ! bar(baz)

The order of evaluation is undefined.

send returns the message sent as its value.

Asynchronous nature of message passing 

     sending a message is an asynchronous operation (no waiting)
     application level synchronisation
     message sent to the terminated process does not notify the sender

Messages are always delivered to the recipient. 

     Messages are delivered in the same order they were sent.

The primitive receive is used to receive messages. 

receive
    Message1 [when Guard1] ->
        Actions1 ;
    Message2 [when Guard2] ->
        Actions2 ;
    ...
end

Process has a mailbox storing messages in the order of arrival.

Message1 and Message2 are patterns: 

    matched against messages that are in the process’s mailbox, 
    removed from the mailbox and 
    then the corresponding ActionsN are evaluated.

Messages in the mailbox that are not selected by receive 

    remain in the mailbox in the same order as they were stored and 
    matched against in the next receive. 

receive returns the value of the last expression evaluated in the actions.

process evaluating receive will be suspended until a message is matched.

    selective receive mechanism 
    no message arriving unexpectedly at a process can block other messages
    make sure that the system does not fill up with such messages.

Order of receiving messages
---------------------------

receive tries to match each message in the mailbox with each pattern.

Let a process mailbox contain messages msg_1, msg_2,msg_3 and msg_4 in that order. 
 
Evaluating

receive
    msg_3 ->
        ...
end

gives the mailbox with messages msg_1, msg_2 and msg_4. 

Evaluating 

receive
    msg_4 ->
        ...
    msg_2 ->
        ...
end

gives the mailbox msg_1 and msg_4. 

Evaluating

receive
    AnyMessage ->
        ...
end

gives the mailbox msg_4.

Ordering of message patterns in a receive does not directly
implement priority of messages.

Receiving messages from a specific process
------------------------------------------

We want to receive messages from a specific process. 

Sender must explicitly include its own process identifier in the message:

Pid ! {self(),abc}

The BIF self() returns the identifier of the calling process.

This could be received by:

receive
    {Pid,Msg} ->
        ...
end

receive as above would receive messages only from process Pid.

Example - counter
-----------------

A new counter process is started by each call to counter:start/0. 

    Process evaluates the function call counter:loop(0).
    Selective message reception for increment

A recursive function to generate a perpetual process.

    Suspended when waiting for input
    loop is a tail recursive function 
    Counter process will evaluate in constant space
    Interface functions increment, value and stop

Handling unknown messages

    Receive and ignore the message 
    Continue by waiting for the next message
    Getting the message out of mailbox
    Standard handling of unknown messages
    
Identifying the messages

    Pid must be sent when accessing the value of the counter
    Reply from counter also includes Pid of counter
    Receiving process can identify the message in this way
    It is unsafe to wait just for an unknown message 
    Identifier can be the contents of protocol
    Identifier can be pid or any other identifier

Example - finite state machine
------------------------------

Simple FSM with four states,

One easy way to program such a state×event machine.

s1() ->
    receive
        msg_a -> s2();
        msg_c -> s3()
    end.

s2() ->
    receive
        msg_x -> s3();
        msg_h -> s4()
    end.

s3() ->
    receive
        msg_b -> s1();
        msg_y -> s2()
    end.

s4() ->
    receive
        msg_i -> s3()
    end.

Each state is represented by a separate function.
  
    Events are represented by messages.
    State functions wait in a receive for an event message.
    When a message received FSM makes a transition by calling 
    the function for that state. 

State data can be handled by adding arguments to the state functions.

    Actions on entering a state are done before the receive.
    Actions on leaving the state are done in receive.

Timeouts
--------

receive primitive can be augmented with an optional time-out. 

receive
    Message1 [when Guard1] ->
        Actions1 ;
    Message2 [when Guard2] ->
        Actions2 ;
    ...
    after TimeOutExpr ->
       ActionsT
end

TimeOutExpr is an expression which evaluates to milliseconds.

    Accuracy of time will be limited by OS or hardware.

If no message obtained within given time, the timeout occurs and
ActionsT is scheduled.

Example of a process which is processing events:

get_event() ->
    receive
        {mouse, click} ->
            receive
                {mouse, click} ->
                    double_click
                after double_click_interval() ->
                    single_click
             end
        ...
    end.

Events are represented as messages. 

get_event waits for a message, and then returns an atom.

    Atom represents event.
    First click, double click, ...

Two vaues of time-out are special: 0 and infinity.

    '0' means all messages are checked and neither one matches 
    therefore time-out actions are evaluated immediately
    'infinity' means that time-out will never occur.

Using timeouts receive has more use than might at first be envisaged.

sleep(Time) suspends the current process for Time milliseconds.

sleep(Time) ->
    receive
        after Time ->
            true
end.

flush_buffer() empties the mailbox of the current process.

flush_buffer() ->
    receive
        AnyMessage ->
            flush_buffer()
        after 0 ->
            true
    end.

Priority messages can be implemented by using timeout value 0.

priority_receive() ->
    receive
        interrupt ->
            interrupt
        after 0 ->
            receive
                AnyMessage ->
                    AnyMessage
            end
    end

priority_receive() will return the first message in the mailbox.

    Unless message interrupt arrived. Then, interrupt will be returned.
    Therefore, we first check if message interupt is in mbox.
    Pattern AnyMessage which will match the first message.

Registered Processes
--------------------

To send a message to a process, one needs to know its identifier (Pid).

    Large system may have many global servers
    Process may wish to hide its identity for security reasons

Registering a process by giving it a name 

    Can send a message to a process without knowing its identity 
    The name of a registered process must be an atom.

Basic primitives (BIFs)

register(Name, Pid)

    Associates the atom Name with the process Pid.

unregister(Name)
 
    Removes the association between the atom Name and a process.

whereis(Name)
    
    Returns pid associated with the registered Name.
    If no processes have been associated it returns the atom undefined.

registered()

    Returns a list of all the currently registered names.

Name of a registered process can appear as a destination in '!'.

Example of using process name.

number_analyser ! {self(), {analyse,[1,2,3,4]}}

Send {Pid,{analyse,[1,2,3,4]}} to process registered as number_analyser.

Client–Server Model
-------------------

Registered processes used for programming of the client–server model.

    Server, which manages some resource
    Clients which send requests to the server to access the resource

Three basic components are necessary to implement this model.

    1) a server, 2) a protocol and an 3) access library

Example module counter.erl

    Each counter is a server.
    Clients accessing these servers use the access functions defined.

Example server in telephone exchange to analyse telephone numbers 

    Numbers dialled by users of the exchange

Server number_analyser 

Function start()

    creates a number analyser server process by calling spawn and then 
    registers the server process as number_analyser.

Message {add_number,Seq,Dest} 

    New number sequence is added to the lookup table 
    along with the destination to return if this sequence is analysed.
    The requesting process is sent the message ack.

Message {analyse,Seq}

    Number analysis is performed on the sequence Seq by calling lookup.
    Message with result of the analysis is sent to the requesting process.

Message sent to server by the client contains the Pid of client.

Reply message sent back to the client also contains a ‘sender’. 

    'sender' is a registered name of the server.
    Client process cam receive the reply message selectively.
    Safer than just waiting for the first message to arrive.

We have now written the server and defined the protocol.

    synchronous protocol---there is always a reply to request
    In the reply ‘sender’ is number_analyser (registered name) 
    We do not wish to disclose the Pid of the server.

We now define interface functions to access the server.

    add_number and analyse implement the client’s side of the protocol.
    local function request to send the request and receive the reply.

The next example (allocator.erl) is a simple resource allocator.

    Server is started with an initial list of ‘resources’
    Processes send requests to allocate one of these resources
    Processes send requests to free a resource 

Implementation of allocator.erl

    Server process keeps two lists 
    One with free resources and one with allocated resources
    Moving resources from one list to another

Process Scheduling, Real-time and Priorities
--------------------------------------------

Scheduling is implmentation-dependent issue

There are some criteria all implementations satisfy

    The scheduling algorithm must be fair
    Any process which can be run will be run
    If possible in the same order as they became runnable

    No process will be allowed to block the machine for a long time
    A process runs for a short period of time, called a time slice
    It is rescheduled to allow another runnable process to be run.
    Time slice = 500 reductions

Soft real-time applications where response times must be in milliseconds
 
Memory management

    Memory is automatically allocated when needed for new data structures and
    Deallocated when these data structures are no longer in use
    Allocating and reclaiming of memory must not block the system
    Allocation takes preferably shorter time than the time slice of a process

Process priorities 

    Sometimes it is desirable that some processes run more often or less often than other
    Process that that monitors the state of the system
    To change the priority of a process the BIF process_flag

process_flag(priority, Pri)

Pri is the new priority of the process in which the call is evaluated 

    The value be normal or low
    Processes with priority low are run less often than normal
    The default process in normal

Process groups

Erlang processes have a Pid called the process’s group leader

    New process will belong to the same process group as the process that 
    evaluated the spawn statement
    Initially the first process of the system is the group leader for itself

        Group leader of all subsequently created processes

    Erlang processes are arranged in a tree, with the first created process at the root

group_leader()

    Returns the Pid of the group leader for the evaluating process

group_leader(Leader, Pid)

    Sets the group leader of process Pid to be the process Leader

The concept of process groups is used by the Erlang input/output system
